/*
 * Copyright (c) 2013 Denis Knyazevich
 * Licensed under the MIT license.
 */

module.exports = function (grunt) {
    'use strict';

    var _ = require('underscore'),
        prepareNamespace = function (namespace) {
            return namespace.replace(/\.{2,}/g, '.').replace(/\.$/, '') + '.';
        },
        expandProperty = function (options) {
            var tab = '        ',
                src = options.src,
                namespace = options.namespace,
                name = new RegExp(namespace + '([_a-zA-Z0-9]+)\\s*=').exec(src);

            if (!name) {
                namespace = namespace.replace(/\.$/, '');

                name = new RegExp(namespace + '(\\[[\'\"]\\s*[^\\]]+\\s*[\'\"]\\])\\s*=').exec(src);

                if (name && name[1]) {
                    src = src.replace(
                            new RegExp(
                                namespace +
                                    name[1].replace(/^\[/, "\\[").replace(/\]$/, "\\]") + '\\s*='
                            ),
                            name[1].replace(/^\[/, '').replace(/\]$/, '') + ':'
                        ).replace(/;\s*$/, '');
                }
            } else {
                src = src.replace(new RegExp(namespace + name[1] + '\\s*='), name[1] + ':')
                    .replace(/;\s*$/, '');
            }

            return tab + src.replace(/\n/g, '\n' + tab).replace(/^\s*/, '');
        };

    grunt.registerMultiTask('engines_concat', function () {
        var options = this.options({
                namespace: '',
                complexProperties: [],
                mainFilePath: '',
                separator: ',\n'
            }),
            complexPropertiesData = "",
            i,
            taskData = {},
            len = (this.args && this.args.length) || 0;

        if (len) {
            if (this.data){
                taskData = this.data;

                for (i = 0; i < len; i++) {
                    taskData = taskData[this.args[i]] || {};
                }

                _.extend(options, taskData.options);
            }
        }

        if (!options.namespace) {
            grunt.log.warn('Namespace is required');
            return false;
        }

        if (!grunt.file.exists(options.mainFilePath)) {
            grunt.log.warn('mainFilePath "' + options.mainFilePath + '" not found.');
            return false;
        }

        options.namespace = prepareNamespace(options.namespace);

        if (len) {
            this.files = [
                {
                    src: grunt.file.expand(taskData.src),
                    dest: taskData.dest
                }
            ];
        };

        if (options.complexProperties && options.complexProperties.length) {
            options.complexProperties.forEach(function (cp, i) {
                if (cp && cp.src && cp.name) {
                    var namespace = prepareNamespace(options.namespace + "." + cp.name),
                        propertyData = grunt.file.expand(cp.src).filter(function(filepath) {
                            if (!grunt.file.exists(filepath)) {
                                grunt.log.warn('Source file "' + filepath + '" not found.');
                                return false;
                            } else {
                                return true;
                            }
                        }).map(function(filepath) {
                            return expandProperty({
                                src: grunt.file.read(filepath),
                                namespace: namespace
                            });
                        }).join(options.separator);

                    complexPropertiesData += cp.name + ": {\n" + propertyData + "\n}" + options.separator;
                }
            });
        }

        this.files.forEach(function(f, i) {
            var mainFileSource,
                src = f.src.filter(function(filepath) {
                    if (!grunt.file.exists(filepath)) {
                        grunt.log.warn('Source file "' + filepath + '" not found.');
                        return false;
                    } else {
                        return true;
                    }
                }).map(function(filepath) {
                    return expandProperty({
                        src: grunt.file.read(filepath),
                        namespace: options.namespace
                    });
                }).join(options.separator);

            mainFileSource = grunt.file.read(options.mainFilePath);

            if (complexPropertiesData) {
                src += options.separator + "\n" + complexPropertiesData.replace(new RegExp(options.separator + "$"), '');
            }

            mainFileSource = mainFileSource.replace('//[ENGINE]', src);

            // Write the destination file.
            grunt.file.write(f.dest, mainFileSource);

            // Print a success message.
            //grunt.log.writeln('File "' + f.dest + '" beautifying');
        });
    });
};