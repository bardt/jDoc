/*
 * Copyright (c) 2013 Denis Knyazevich
 * Licensed under the MIT license.
 */

module.exports = function (grunt) {
    'use strict';

    var _ = require('underscore');

    grunt.registerMultiTask('engines_concat', function () {
        var options = this.options({
                namespace: '',
                mainFilePath: '',
                separator: ',\n'
            }),
            i,
            taskData = {},
            len = (this.args && this.args.length) || 0;

        if (len) {
            if (this.data){
                taskData = this.data;

                for (i = 0; i < len; i++) {
                    taskData = taskData[this.args[i]] || {};
                }

                _.extend(options, taskData.options);
            }
        }

        if (!options.namespace) {
            grunt.log.warn('Namespace is required');
            return false;
        }

        if (!grunt.file.exists(options.mainFilePath)) {
            grunt.log.warn('mainFilePath "' + options.mainFilePath + '" not found.');
            return false;
        }

        options.namespace = options.namespace.replace(/\.$/, '') + '.';

        if (len) {
            this.files = [
                {
                    src: grunt.file.expand(taskData.src),
                    dest: taskData.dest
                }
            ];
        };

        this.files.forEach(function(f, i) {
            var mainFileSource,
                tab = '        ',
                src = f.src.filter(function(filepath) {
                    if (!grunt.file.exists(filepath)) {
                        grunt.log.warn('Source file "' + filepath + '" not found.');
                        return false;
                    } else {
                        return true;
                    }
                }).map(function(filepath) {
                        var src = grunt.file.read(filepath),
                            name;

                        name = new RegExp(options.namespace + '([_a-zA-Z0-9]+)\\s*=').exec(src);

                        if (name && name[1]) {
                            src = src.replace(new RegExp(options.namespace + name[1] + '\\s*='), name[1] + ':')
                                .replace(/;\s*$/, '');
                        }

                        return tab + src.replace(/\n/g, '\n' + tab).replace(/^\s*/, '');
                    }).join(options.separator);

            mainFileSource = grunt.file.read(options.mainFilePath);

            mainFileSource = mainFileSource.replace('//[ENGINE]', src);

            // Write the destination file.
            grunt.file.write(f.dest, mainFileSource);

            // Print a success message.
            //grunt.log.writeln('File "' + f.dest + '" beautifying');
        });
    });
};